open Core

let seed_string =
  "1347397244 12212989 2916488878 1034516675 2821376423 8776260 2240804122 368941186 \
   824872000 124877531 1597965637 36057332 4091290431 159289722 1875817275 106230212 \
   998513229 159131132 2671581775 4213184"
;;

let seeds = String.split seed_string ~on:' ' |> List.map ~f:Int.of_string

type map =
  { dest : int
  ; src : int
  ; len : int
  }
[@@deriving sexp]

let print_map m = sexp_of_map m |> Sexp.to_string_hum |> print_endline

let parse_maps s =
  let split = String.split s ~on:' ' |> List.map ~f:Int.of_string in
  match split with
  | [ dest; src; len ] -> { dest; src; len }
  | _ -> failwith "bad map"
;;

let map_from_string s = String.split s ~on:'\n' |> List.map ~f:parse_maps
let parse_ranges string = string |> map_from_string
let in_range target map = map.src <= target && target < map.src + map.len

let find_dest target map =
  let diff = target - map.src in
  let in_range = 0 <= diff && diff < map.len in
  if in_range then map.dest + diff else target
;;

let find_or_input maps target =
  let filtered = List.find maps ~f:(in_range target) in
  match filtered with
  | Some f -> find_dest target f
  | None -> target
;;

let seed_to_soil =
  "2988689842 4194451945 100515351\n\
   2936009234 3353543976 52680608\n\
   588295233 2638661119 66434163\n\
   3932833115 2936009234 88315480\n\
   3525561241 3331695912 21848064\n\
   1622262003 1969921080 210668061\n\
   2160566101 909457337 162053391\n\
   1832930064 1887384181 82536899\n\
   3625461917 3024324714 307371198\n\
   3547409305 3680043285 78052612\n\
   1915466963 588295233 240773057\n\
   3089205193 3758095897 436356048\n\
   4021148595 3406224584 273818701\n\
   2156240020 2705095282 4326081\n\
   1164190025 2180589141 458071978\n\
   2477360206 829068290 80389047\n\
   2322619492 2709421363 154740714\n\
   654729396 1377923552 509460629\n\
   2557749253 1211672006 166251546\n\
   2724000799 1071510728 140161278"
  |> parse_ranges
;;

let soil_to_fertilizer =
  "3961802244 3774724750 90737174\n\
   3164426550 3931513861 70563571\n\
   147221566 1279409424 704464\n\
   1394834067 2074132435 40845148\n\
   3795834030 2142537807 47621185\n\
   4083197470 4095560143 199407153\n\
   2722903919 2876212954 93296050\n\
   3467494732 2775293966 100918988\n\
   1809650294 1815421878 66426374\n\
   505665614 275280169 12031240\n\
   2142537807 4002077432 60985377\n\
   1577608496 331482268 177958690\n\
   2590855103 2196397738 132048816\n\
   1942888942 1978207624 24340152\n\
   756722275 120895382 4815243\n\
   3435289775 3899308904 32204957\n\
   1967229094 715059087 147748489\n\
   3955563498 2190158992 6238746\n\
   356096070 125710625 149569544\n\
   2520387506 2704826369 70467597\n\
   517696854 2041922514 32209921\n\
   1755567186 0 54083108\n\
   348569226 1280113888 7526844\n\
   761537518 1597328127 34415327\n\
   1114796271 1631743454 128592301\n\
   0 1494456232 102871895\n\
   1070625412 287311409 44170859\n\
   549906775 1287640732 206815500\n\
   102871895 710084154 4974933\n\
   1298474695 1881848252 96359372\n\
   3843455215 2549697361 112108283\n\
   3761987050 3865461924 33846980\n\
   4052539418 2674168317 30658052\n\
   1435679215 862807576 141929281\n\
   795952845 1004736857 274672567\n\
   3729489716 4063062809 32497334\n\
   2203523184 3085216895 316864322\n\
   2931907860 3402081217 11267883\n\
   107846828 2002547776 39374738\n\
   2816199969 2969509004 115707891\n\
   3568413720 3413349100 161075996\n\
   2943175743 2328446554 221250807\n\
   3234990121 3574425096 200299654\n\
   4282604623 2661805644 12362673\n\
   147926030 509440958 200643196\n\
   1876076668 54083108 66812274\n\
   1243388572 1760335755 55086123"
  |> parse_ranges
;;

let fertilizer_to_water =
  "2460553918 850437816 63304366\n\
   1259757436 1986466040 193004355\n\
   2879827793 2638634287 61837387\n\
   39629536 0 3143529\n\
   2160922553 2535779758 68016930\n\
   2523858284 922523353 36811379\n\
   52449107 1199799263 207670511\n\
   2692884203 2603796688 34837599\n\
   3755186617 147251641 492169035\n\
   3266515480 3620937477 292130997\n\
   1596851845 4077877285 217090011\n\
   2727721802 913742182 8781171\n\
   3055087322 3913068474 164808811\n\
   2228939483 2179470395 229525704\n\
   3668162112 1052896909 87024505\n\
   3219896133 1539684314 30399976\n\
   1510550909 1679599925 86300936\n\
   0 3143529 39629536\n\
   2560669663 1407469774 132214540\n\
   1452761791 1142010145 57789118\n\
   260119618 2700471674 920465803\n\
   3250296109 1036677538 16219371\n\
   1813941856 1026924408 9753130\n\
   4247355652 2488168114 47611644\n\
   1823694986 959334732 67589676\n\
   2831305507 639420676 48522286\n\
   2736502973 52449107 94802534\n\
   1180585421 2408996099 79172015\n\
   2941665180 1765900861 113422142\n\
   2458465187 1139921414 2088731\n\
   3558646477 1570084290 109515635\n\
   1891284662 687942962 162494854\n\
   2053779516 1879323003 107143037"
  |> parse_ranges
;;

let water_to_light =
  "2196302869 3170532562 121192468\n\
   3065704582 2916528129 254004433\n\
   2858667310 1154274853 9085577\n\
   3789349818 1163360430 70779786\n\
   2064226029 1434838179 90165206\n\
   1448515654 725716988 103420445\n\
   2690533041 2124509945 168134269\n\
   347894075 3345882022 38285799\n\
   3966625235 2618593488 35838159\n\
   4186823059 4134088017 89981817\n\
   1701108140 1088713231 65561622\n\
   2589948930 2518009377 100584111\n\
   4283393470 4230658428 11573826\n\
   0 3384167821 347894075\n\
   1638541363 2061943168 62566777\n\
   1296314418 573515752 152201236\n\
   1065865126 194284013 230449292\n\
   1766669762 1991838394 70104774\n\
   830054797 2292644214 110248534\n\
   3595088014 3291725030 12245358\n\
   1978385607 1905997972 85840422\n\
   3607333372 424733305 148782447\n\
   3511869770 2833309885 83218244\n\
   4134088017 4242232254 52735042\n\
   2154391235 3303970388 41911634\n\
   494720868 3732061896 335333929\n\
   1836774536 1234140216 141611071\n\
   2317495337 1633544379 272453593\n\
   4002463394 2402892748 64932431\n\
   940303331 829137433 125561795\n\
   1551936099 954699228 27518372\n\
   4276804876 4224069834 6588594\n\
   3756115819 2467825179 33233999\n\
   2867752887 0 19073457\n\
   386179874 1525003385 108540994\n\
   1579454471 1375751287 59086892\n\
   3319709015 2501059178 16950199\n\
   3336659214 19073457 175210556\n\
   3860129604 982217600 106495631\n\
   2886826344 2654431647 178878238"
  |> parse_ranges
;;

let light_to_temperature =
  "977891457 1797846421 453265654\n\
   3607226990 3913974738 161345346\n\
   2303244644 3266224873 12707372\n\
   1537599301 3278932245 264559714\n\
   354466514 3168465761 62294113\n\
   747844586 3543491959 55668994\n\
   2982698313 3599160953 269886589\n\
   2067998119 2251112075 27763866\n\
   59336731 230685734 266868096\n\
   3768572336 1500157846 31849471\n\
   3856743875 939537646 438223421\n\
   2095761985 59336731 146190926\n\
   326204827 4075320084 28261687\n\
   1502134302 3230759874 35464999\n\
   1431157111 868560455 70977191\n\
   2315952016 2579115195 227102616\n\
   1802159015 1532007317 265839104\n\
   2241952911 807268722 61291733\n\
   3297512098 497553830 309714892\n\
   852851251 4103581771 2643427\n\
   3252584902 3869047542 44927196\n\
   855494678 1377761067 122396779\n\
   2543054632 4106225198 139404427\n\
   2682459059 2278875941 300239254\n\
   803513580 4245629625 49337671\n\
   416760627 205527657 25158077\n\
   3800421807 2806217811 56322068\n\
   441918704 2862539879 305925882"
  |> parse_ranges
;;

let temperature_to_humidity =
  "3507573 490548898 11693081\n\
   545755853 699222305 569882925\n\
   3794976513 167435410 77260251\n\
   0 1526297837 3507573\n\
   1335234764 1766508370 36536350\n\
   2131780538 502241979 64264976\n\
   3707588652 1679120509 87387861\n\
   96082543 2288930706 220305732\n\
   1371771114 1529805410 106547120\n\
   481810045 3044354609 63945808\n\
   15200654 1426594789 7560739\n\
   3206337878 109359655 58075755\n\
   2445677382 2019348918 269581788\n\
   1909096745 3571407035 4209780\n\
   3138678479 4049712539 66833109\n\
   3400069156 3490205314 81201721\n\
   4084645800 3846924477 65868498\n\
   2353535073 1434155528 92142309\n\
   1716598669 3935506457 114206082\n\
   3264413633 4116545648 30901597\n\
   1913306525 3628450464 218474013\n\
   3205511588 3461720938 826290\n\
   2748703371 2770603565 195642711\n\
   2715259170 244990096 33149766\n\
   1478318234 3108300417 88629505\n\
   22761393 0 73321150\n\
   3295315230 3575616815 45887125\n\
   3872236764 278139862 212409036\n\
   2196045514 1269105230 157489559\n\
   2972004168 2509236438 123906332\n\
   316388275 3296299168 165421770\n\
   1685215763 3025113077 18894296\n\
   2748408936 244695661 294435\n\
   3704521599 4147447245 3067053\n\
   1215008024 566506955 120226740\n\
   1830804751 3912792975 22713482\n\
   1704110059 686733695 12488610\n\
   3488217401 1803044720 216304198\n\
   1872711004 3044007373 347236\n\
   1566947739 2652335541 118268024\n\
   3481270877 3621503940 6946524\n\
   2944346082 3462547228 27658086\n\
   3095910500 1636352530 42767979\n\
   1115638778 3196929922 99369246\n\
   3341202355 2966246276 58866801\n\
   1853518233 2633142770 19192771\n\
   1873058240 73321150 36038505"
  |> parse_ranges
;;

let humidity_to_location =
  "336906655 0 11018487\n\
   4177510177 2085057023 105144397\n\
   1299579245 2985741466 175347598\n\
   643133711 2270603056 161424888\n\
   2404489601 1000033728 105953201\n\
   4282654574 2864154964 12312722\n\
   3409171342 3327025690 30826088\n\
   2119751049 2190201420 80401636\n\
   3393269098 3357851778 15902244\n\
   82121354 319849190 39107402\n\
   1953814423 3161089064 165936626\n\
   64524116 385149760 17597238\n\
   3439997430 2057119912 27937111\n\
   0 358956592 26193168\n\
   347925142 11018487 93152804\n\
   1484466972 2432027944 360604841\n\
   2510442802 643133711 347359888\n\
   26193168 402746998 38330948\n\
   1190305465 2946259551 39481915\n\
   2200152685 1105986929 204336916\n\
   3467934541 2792632785 71522179\n\
   804558599 3373754022 385746866\n\
   3539456720 1310323845 638053457\n\
   2857802690 3759500888 535466408\n\
   121228756 104171291 215677899\n\
   1229787380 2876467686 69791865\n\
   1474926843 990493599 9540129\n\
   1845071813 1948377302 108742610"
  |> parse_ranges
;;

let humidity_locations =
  List.map humidity_to_location ~f:(fun m ->
    let dest_range = List.range m.dest (m.dest + m.len) in
    dest_range)
  |> List.concat
;;

let search seed =
  let location =
    seed
    |> find_or_input seed_to_soil
    |> find_or_input soil_to_fertilizer
    |> find_or_input fertilizer_to_water
    |> find_or_input water_to_light
    |> find_or_input light_to_temperature
    |> find_or_input temperature_to_humidity
    |> find_or_input humidity_to_location
  in
  location
;;

(*part 1*)
(* let locations = List.map seeds ~f:search in *)
(* let min_location = List.min_elt locations ~compare:Int.compare in *)
(* match min_location with *)
(* | Some x -> print_endline (Int.to_string x) *)
(* | None -> print_endline "no min location" *)
(**)

(*part 2*)
let rec seed_split list acc =
  match list with
  | [] -> acc
  | a :: b :: tl -> seed_split tl ((a, b) :: acc)
  | _ -> failwith "bad seed"
;;

(* need to split seed range based on next mappings*)

(* module T = Domainslib.Task *)
(**)
(* let search_range pool a b = *)
(*   T.async pool (fun _ -> *)
(*     let range = List.range a b in *)
(*     List.map range ~f:search |> List.min_elt ~compare:Int.compare) *)
(* ;; *)
(**)
(* let start_time = Time_float.now () in *)
(* let pool = T.setup_pool ~num_domains:10 () in *)
(* let seed_with_range = seed_split seeds [] in *)
(* let res = *)
(*   T.run pool (fun _ -> *)
(*     let locations = *)
(*       List.map seed_with_range ~f:(fun (a, b) -> *)
(*         let result = search_range pool a (a + b) in *)
(*         T.await pool result) *)
(*     in *)
(*     let filtered = List.filter_opt locations in *)
(*     let min_location = List.min_elt filtered ~compare:Int.compare in *)
(*     min_location) *)
(* in *)
(* (match res with *)
(*  | Some x -> print_endline (Int.to_string x) *)
(*  | None -> print_endline "no min location"); *)
(* let end_time = Time_float.now () in *)
(* print_endline (Time_float.diff end_time start_time |> Time_float.Span.to_string); *)
(* T.teardown_pool pool *)

(*
   seeds: (79, 92) (55  67)

   seed-to-soil map:
   50 98 2
   52 50 48

   soil-to-fertilizer map:
   0 15 37
   37 52 2
   39 0 15

   fertilizer-to-water map:
   49 53 8
   0 11 42
   42 0 7
   57 7 4

   water-to-light map:
   88 18 7
   18 25 70

   light-to-temperature map:
   45 77 23
   81 45 19
   68 64 13

   temperature-to-humidity map:
   0 69 1
   1 0 69

   humidity-to-location map:
   60 56 37
   56 93 4
*)
